generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (works with NextAuth)
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  estimates     Estimate[] // Relation to estimates
}

// For NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// For NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// For NextAuth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Estimate model
model Estimate {
  id                  String   @id @default(cuid())
  estimateNumber      String
  issueDate           String
  expiryDate          String?
  
  // Company info
  companyName         String
  companyAddress      String
  companyPhone        String?
  companyFax          String?
  companyEmail        String?
  
  // Client info
  clientName          String
  clientAddress       String?
  clientContactPerson String?
  
  // Project info
  projectName         String
  
  // Payment info
  paymentTerms        String?
  paymentMethod       String?
  bankInfo            String?
  
  // Financial details
  taxRate             Float         @default(10)
  subtotal            Float
  taxAmount           Float
  total               Float
  notes               String?
  
  // Items stored as JSON
  items               Json
  
  // Timestamps and relations
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  userId              String
  user                User          @relation(fields: [userId], references: [id])
}